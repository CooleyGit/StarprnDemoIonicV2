{"version":3,"sources":["../../../src/@ionic-native/plugins/star-prnt/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface Printer {\n  /**\n   * Printer model name and model number\n   */\n  modelName?: string;\n\n  /**\n   * Printer Mac Address \n   */\n  macAddress?: string;\n\n   /**\n   * Printer port name used to create a new port instance of SMPort or StarIOExtManager\n   */\n  portName?: string;\n    /**\n   * USB Serial Number (USB Printers Only)\n   */\n  USBSerialNumber?: string;\n}\n/**\n * Array of Printer objects returned by the portDiscovery() function\n */\nexport interface Printers extends Array<Printer> { }\n\nexport interface PrinterStatus {\n  /**\n   * Printer Online/Offline status\n   */\n  offline?: boolean;\n\n  /**\n   *  Printer model name and model number \n   */\n  ModelName?: string;\n\n   /**\n   * Printer cover status\n   */\n  coverOpen?: boolean;\n\n    /**\n   * Printer Paper Cutter status\n   */\n  cutterError?: boolean;\n\n  /**\n   * Printer Paper status\n   */\n  receiptPaperEmpty?: boolean;\n\n  /**\n   * Printer Firmware information\n   */\n  FirmwareVersion?: string;\n}\n\nexport interface PrintObj {\n  /**\n   * string containing the text to print, Example: \"Star Clothing Boutique\\n123 Star Road\\nCity, State 12345\\n\\n\" \n   */\n  text: string;\n\n  /**\n   *  Sends a PartialCutWithFeed command to the printer, defaults to true\n   */\n  cutReceipt?: boolean;\n\n   /**\n   * sends a appendPeripheral command to the printer for channels No1 and No2 - Defaults to true\n   */\n  openCashDrawer?: boolean;\n}\nexport interface RasterObj extends PrintObj {\n  /**\n   * Font size number, defaults to 25\n   */\n  fontSize?: number;\n\n  /**\n   * Paper width (Units: Dots). 2 inches: 384, 3 inches: 576, 4 inches: 832, ESCPos 3 inches: 512, Dot 3 inches: 210. Defaults to 576\n   */\n  paperWidth?: number;\n}\nexport interface ImageObj {\n   /**\n   * Image URI to print, this can be obtained via the camera or photo library or as a static resource saved on the phone memory\n   */\n  uri: string;\n\n  /**\n   * Image width (Units: Dots) defaults to 576  \n   */\n  paperWidth?: number;\n\n  /**\n   *  Sends a PartialCutWithFeed command to the printer, defaults to true\n   */\n  cutReceipt?: boolean;\n\n   /**\n   * sends a appendPeripheral command to the printer for channels No1 and No2 - Defaults to true\n   */\n  openCashDrawer?: boolean;\n}\nexport interface PrintCommand {\n  /**\n  * Data (Text and Command) is added to the command buffer. Example: {append:\"Star Clothing Boutique\\n123 Star Road\\nCity, State 12345\\n\\n\"} \n  */\n append?: string;\n\n /**\n  * Data (Text and Command) is added to the command buffer. Example: {appendRaw:\"Star Clothing Boutique\\n123 Star Road\\nCity, State 12345\\n\\n\"} \n  */\n appendRaw?: string;\n\n /**\n  * Set command of the character space is generated and added to the command buffer. Character Spacs (Unit: Dots) Example: 4\n  */\n appendCharacterSpace?: number;\n\n /**\n  *  Select command of the emphasis mode is generated and added to the command buffer. Example: {appendEmphasis:\"SALE\\n\"}\n  */\n appendEmphasis?: string;\n\n /**\n  *  Select command of the invert mode is generated and added to the command buffer. Example: {appendInvert:\"Refunds and Exchanges\\n\"}\n  */\n appendInvert?: string;\n\n /**\n  *  Select command of the under line mode is generated and added to the command buffer. Example: {appendUnderline:\"30 days\"}\n  */\n appendUnderline?: string;\n\n /**\n  * Select command of the international character mode is generated and added to the command buffer.\n  * Choose the format of the return value Defined in StarPRNT.InternationalType or the InternationalType enum.\n  * 'UK' | 'USA' | 'France' | 'Germany' | 'Denmark' | 'Sweden' | 'Italy' | 'Spain' | 'Japan' | 'Norway' | 'Denmark2' | 'Spain2' | 'LatinAmerica' | 'Korea' | 'Ireland' | 'Legal'\n  * Example {appendInternational:InternationalType.UK}\n  */\n appendInternational?: string;\n\n /**\n  * Line feed command is generated and added to the command buffer. Paper feed units (Units: Lines) Example: 2\n  */\n appendLineFeed?: number;\n\n /**\n  * Unit feed command is generated and added to the command buffer. Paper feed units (Units: Dots) Example: 64\n  */\n appendUnitFeed?: number;\n\n /**\n  * Set command of the line space is generated and added to the command buffer. Line spaces (Units: Dots) Example: 32\n  */\n appendLineSpace?: number;\n\n /**\n  * Select command of the font style is generated and added to the command buffer. \n  * Choose the format of the return value defined in StarPRNT.FontStyleType or the FontStyleType enum. 'A' | 'B'\n  * Example: {appendFontStyle:FontStyleType.A}\n  */\n appendFontStyle?: string;\n\n /**\n * Paper cut command is generated and added to the command buffer.\n * Choose the format of the return value defined in StarPRNT.CutPaperAction or the CutPaperAction enum. 'FullCut' | 'FullCutWithFeed' | 'PartialCut' | 'PartialCutWithFeed' \n * Example: {appendCutPaper:CutPaperAction.PartialCutWithFeed}\n */\n appendCutPaper?: string;\n\n  /**\n  * Black mark command is generated and added to the command buffer.\n  * Choose the format of the return value defined in StarPRNT.BlackMarkType or the BlackMarkType enum. 'Valid' | 'Invalid' | 'ValidWithDetection' \n  * Example: {appendBlackMark: BlackMarkType.Valid}\n  */\n appendBlackMark?: string;\n\n  /**\n  * Absolute position command is generated and added to the command buffer. (Unit: Dots). Send in conjunction with the data property to append absolute position just to that string\n  * Example1: Append data with Absolute position {appendAbsolutePosition:40, data: \"Text with absolute position\"}  \n  * Example2: Append absolute position to subsequent commands: {appendAbsolutePosition:40}\n  */\n appendAbsolutePosition?: number;\n\n  /**\n  * Alignment command is generated and added to the command buffer. Send in conjunction with the data property to append alignment position just to that string\n  * Choose the format of the return value defined in StarPRNT.AlignmentPosition or the AlignmentPosition enum. 'Left' | 'Center' | 'Right'.\n  * Example1 Append data with Alignment position: {appendAlignment:AlignmentPosition.Center, data: \"Text with centered position\"}  \n  * Example2 Append absolute position to subsequent commands: {appendAlignment:AlignmentPosition.Center}\n  */\n appendAlignment?: string;\n\n   /**\n  * Horizontal tab set/clear command is generated and added to the command buffer. (Only works for certain printer models, check the starSDK documentation for details)\n  * Array of horizontal tab positions (Units: ANK character pitch). Specifying empty array deletes all currently set horizontal tab positions.\n  * Example: {appendHorizontalTabPosition:[15, 35]}\n  * Delete positions Example: {appendHorizontalTabPosition:[]}  \n  */\n appendHorizontalTabPosition?: Array<number>;\n\n   /**\n  * Print command of the logo is generated and added to the command buffer. The logo has to be uploaded to the printer using the Star Print utility.\n  * Send in conjuction with the logoSize property to set the logo size\n  * Example: {appendLogo:1}\n  * Example with LogoSize: {appendLogo:1, logoSize:LogoSize.DoubleWidthDoubleHeight}\n  */\n appendLogo?: number;\n\n /**\n  * Property to be used with the appendLogo command.\n  * Choose the format of the return value defined in StarPRNT.LogoSize or the LogoSize enum. 'Normal' | 'DoubleWidth' | 'DoubleHeight' | 'DoubleWidthDoubleHeight';\n  * Example: {appendLogo:1, logoSize:LogoSize.DoubleWidthDoubleHeight}\n  */\n logoSize?: string;\n\n /**\n  * Print command of the barcode is generated and added to the command buffer.\n  * Additional Properties: BarcodeSymbology, BarcodeWidth, height, hri, absolutePosition, alignment.\n  * Example: {appendBarcode:\"{BStar\", BarcodeSymbology:BarcodeSymbology.Code128, BarcodeWidth:BarcodeWidth.Mode2, height:40, hri:true }\n  * Example with absolutePosition: {appendBarcode:\"{BStar\", BarcodeSymbology:BarcodeSymbology.Code128, BarcodeWidth:BarcodeWidth.Mode2, height:40, hri:true, absolutePosition:40 }\n  * Example with alignment:{appendBarcode:\"{BStar\", BarcodeSymbology:BarcodeSymbology.Code128, BarcodeWidth:BarcodeWidth.Mode2, height:40, hri:true, alignment:alignment:AlignmentPosition.Center }\n  */\n appendBarcode?: string;\n\n  /**\n  * Property to be used with the appendBarcode command.\n  * Choose the format of the return value defined in StarPRNT.BarcodeSymbology or the BarcodeSymbology enum. \n  * 'Code128' | 'Code39' | 'Code93' | 'ITF' | 'JAN8' | 'JAN13' | 'NW7' | 'UPCA' | 'UPCE' | \n  * Example: {appendBarcode:'{BStar', BarcodeSymbology:BarcodeSymbology.Code128}\n  */\n BarcodeSymbology?: string;\n\n /**\n  * Property to be used with the appendBarcode command.\n  * Choose the format of the return value defined in StarPRNT.BarcodeWidth or the BarcodeWidth enum. \n  * Mode1 | Mode2 | Mode3 | Mode4 | Mode5 | Mode6 | Mode7 | Mode8 | Mode9\n  * Example: {appendBarcode:'{BStar', BarcodeWidth:BarcodeWidth.Mode2}\n  */\n BarcodeWidth?: string;\n\n /**\n  * Property to be used with the appendBarcode command.\n  * Under-bar characters. true = Valid, false = Invalid\n  * Example: {appendBarcode:'{BStar', hri:true}\n  */\n hri?: boolean;\n\n /**\n  * Property to be used with the appendBarcode command or the appendMultiple command (Units:Dots)\n  * appendBarcode Example: {appendBarcode:'{BStar', height:40}\n  * appendMultiple: {appendMultiple:'text to print', height:40}\n  */\n height?: number;\n\n /**\n  * Property to be used with the appendBitmap command or the appendMultiple command (Units:Dots)\n  * appendBitmap Example: {appendBitmap:uri, width:576}\n  * appendMultiple: {appendMultiple:'text to print', width:40}\n  */\n width?: number;\n\n  /**\n  * Property to be used with the appendBitmap command, the appendBarcode command, or the appendQrCode command (Units:Dots)\n  * appendBitmap Example: {appendBitmap:uri, absolutePosition:40}.\n  * appendBarcode Example: {appendBarcode:'{BStar', absolutePosition:40}.\n  * appendQrCode Example: {appendQrCode:'{BStar', absolutePosition:40}.\n  */\n absolutePosition?: number;\n\n  /**\n  * Property to be used with the appendBitmap command, the appendBarcode command, or the appendQrCode command (Units:Dots)\n  * Choose the format of the return value defined in StarPRNT.AlignmentPosition or the AlignmentPosition enum. 'Left' | 'Center' | 'Right'.\n  * appendBitmap Example: {appendBitmap:uri, alignment:AlignmentPosition.Center}.\n  * appendBarcode Example: {appendBarcode:'{BStar', alignment:AlignmentPosition.Center}.\n  * appendQrCode Example: {appendQrCode:'{BStar', alignment:AlignmentPosition.Center}.\n  */\n alignment?: string;\n\n   /**\n  * Select command of the multiple mode is generated and added to the command buffer.\n  * Additional properties: width:number, height:number\n  * Example: {appendMultiple:\"   $156.95\\n\", width:2, height:2}.\n  */\n appendMultiple?: string;\n\n /**\n  * Print command of the QR code is generated and added to the command buffer.\n  * Additional Properties: QrCodeModel, QrCodeLevel, cell, absolutePosition, alignment.\n  * Example: {appendQrCode:\"{BStar\", QrCodeModel:\"No2\", QrCodeLevel:\"L\", cell: 8}.\n  * Example with absolutePosition: {appendQrCode:\"{BStar\", QrCodeModel:\"No2\", QrCodeLevel:\"L\", cell: 8, absolutePosition: 40 }.\n  * Example with alignment: {appendQrCode:\"{BStar\", QrCodeModel:\"No2\", QrCodeLevel:\"L\", cell: 8, alignment:\"Center\" }.\n  */\n appendQrCode?: string;\n\n /**\n  * Property to be used with the appendQrCode command.\n  * Choose the format of the return value defined in StarPRNT.QrCodeModel or the QrCodeModel enum. 'No1' | 'No2' Default 'No2'\n  * Example: {appendQrCode:'{BStar', QrCodeModel:QrCodeModel.No1}\n  */\n QrCodeModel?: string;\n\n  /**\n  * Property to be used with the appendQrCode command.\n  * Choose the format of the return value defined in StarPRNT.QrCodeLevel or the QrCodeLevel enum. 'No1' | 'No2'. Default 'H'\n  * Example: {appendQrCode:'{BStar', QrCodeLevel:QrCodeLevel.H}\n  */\n QrCodeLevel?: string;\n\n /**\n  * Property to be used with the appendQrCode command. QRCode Cell size. Default 4.\n  * Example: {appendQrCode:'{BStar', cell:8}\n  */\n cell?: number;\n\n  /**\n  * Print command of the bitmap is generated and added to the command buffer. Takes a string image URI \n  * this can be obtained via the camera or photo library or as a static resource saved on the phone memory.\n  * Additional Properties: diffusion, width, bothScale, rotation, absolutePosition, alignment.\n  * Example: {appendBitmap:uri, diffusion: true, width:576, bothScale: true}\n  * Example with absolutePosition: {appendBitmap:uri, diffusion: true, width:576, bothScale: true, absolutePosition: 40 }.\n  * Example with alignment: {appendBitmap:uri, diffusion: true, width:576, bothScale: true, alignment:\"Center\" }.\n  */\n appendBitmap?: string;\n\n  /**\n  * Property to be used with the appendBitmap command. Random dither: true = Valid, false = Invalid. Default true.\n  * Example: {appendBitmap:uri, diffusion: false }\n  */\n diffusion?: boolean;\n\n /**\n  * Property to be used with the appendBitmap command. Height is changed according to the conversion rate of the width property.\n  * true = Valid, false = Invalid. Default true.\n  * Example: {appendBitmap:uri, bothScale: true }\n  */\n bothScale?: boolean;\n\n /**\n  * Property to be used with the appendBitmap command.\n  * Choose the format of the return value defined in StarPRNT.BitmapConverterRotation or the BitmapConverterRotation enum.\n  * 'Normal' | 'Left90' | 'Right90' | 'Rotate180'\n  * Example: {appendBitmap:uri, rotation: BitmapConverterRotation.Left90 }\n  */\n rotation?: string;\n\n  /**\n  * sends a appendPeripheral command to the printer for channel number: Example: 1 = No1, 2 = No2\n  */\n openCashDrawer?: number;\n}\n\n /**\n  * InternationalType constants\n  */\nexport enum InternationalType {\n  UK = 'UK', USA = 'USA', France = 'France', Germany = 'Germany', Denmark = 'Denmark', Sweden = 'Sweden', Italy = 'Italy', Spain = 'Spain',\n  Japan = 'Japan', Norway = 'Norway', Denmark2 = 'Denmark2', Spain2 = 'Spain2', LatinAmerica = 'LatinAmerica', Korea = 'Korea', Ireland = 'Ireland', Legal = 'Legal'\n}\n\n/**\n  * FontStyleType constants.\n  */\nexport enum FontStyleType {\n  /** Font-A (12 x 24 dots) / Specify 7 x 9 font (half dots) */\n  A = 'A',\n  /** Font-B (9 x 24 dots) / Specify 5 x 9 font (2P-1) */\n  B = 'B'\n}\n\n /**\n  * CutPaperAction constants.\n  */\nexport enum CutPaperAction {\n  FullCut = 'FullCut', FullCutWithFeed = 'FullCutWithFeed', PartialCut = 'PartialCut',  PartialCutWithFeed = 'PartialCutWithFeed'\n}\n\n /**\n  * BlackMarkType constants. \n  */\nexport enum BlackMarkType {\n  Valid = 'Valid', Invalid = 'Invalid', ValidWithDetection = 'ValidWithDetection'\n}\n\n/**\n  * LogoSize constants\n  */\nexport enum LogoSize {\n  Normal = 'Normal', DoubleWidth = 'DoubleWidth', DoubleHeight = 'DoubleHeight', DoubleWidthDoubleHeight = 'DoubleWidthDoubleHeight'\n}\n\n/**\n  * AlignmentPosition constants\n  */\nexport enum AlignmentPosition {\n   Left = 'Left',\n   Center = 'Center',\n   Right = 'Right'\n}\n\n/**\n  * BarcodeSymbology constants\n*/\nexport enum BarcodeSymbology {\n  Code128 = 'Code128',\n  Code39 = 'Code39',\n  Code93 = 'Code93',\n  ITF = 'ITF',\n  JAN8 = 'JAN8',\n  JAN13 = 'JAN13',\n  NW7 = 'NW7',\n  UPCA = 'UPCA',\n  UPCE = 'UPCE'\n}\n\n/**\n  * BarcodeWidth constants\n*/\nexport enum BarcodeWidth {\n  Mode1 = 'Mode1',\n  Mode2 = 'Mode2',\n  Mode3 = 'Mode3',\n  Mode4 = 'Mode4',\n  Mode5 = 'Mode5',\n  Mode6 = 'Mode6',\n  Mode7 = 'Mode7',\n  Mode8 = 'Mode8',\n  Mode9 = 'Mode9'\n}\n\n/**\n  * QrCodeModel constants\n*/\nexport enum QrCodeModel {\n  No1 = 'No1',\n  No2 = 'No2'\n}\n\n/**\n  * QrCodeLevel constants\n*/\nexport enum QrCodeLevel {\n  H = 'H',\n  L = 'L',\n  M = 'M',\n  Q = 'Q'\n}\n\n/**\n  * BitmapConverterRotation constants\n*/\nexport enum BitmapConverterRotation {\n  Normal = 'Normal',\n  Left90 = 'Left90',\n  Right90 = 'Right90',\n  Rotate180 = 'Rotate180'\n}\n\n\n\n\n/**\n  * Push a new PrintCommand object to the array for a separate instruction to the printer. Example [{append:\"text\"}, {\"openCashDrawer: 1\"}]\n  */\nexport interface CommandsArray extends Array<PrintCommand> { }\n\n\n/**\n * @name StarPRNT\n * @description\n * * Ionic Native wrappers for the starprnt cordova plugin for Star Micronics bluetooth/LAN printers\n *\n * @usage\n * ```typescript\n * import { StarPRNT } from '@ionic-native/starprnt';\n *\n *\n * constructor(private starprnt: StarPRNT) { }\n *\n * ...\n *\n *\n * this.starprnt.portDiscovery('all')\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'StarPRNT',\n  plugin: 'cordova-plugin-starprnt', // npm package name, example: cordova-plugin-camera\n  pluginRef: 'starprnt', // the variable reference to call the plugin, example: navigator.geolocation\n  repo: 'https://github.com/infoxicator/starprnt', // the github repository URL for the plugin\n  install: '', // OPTIONAL install command, in case the plugin requires variables\n  installVariables: [], // OPTIONAL the plugin requires variables\n  platforms: ['Android', 'iOS'] // Array of platforms supported, example: ['Android', 'iOS']\n})\n\nexport class StarPRNT extends IonicNativePlugin {\n\n  /**\n   * Constant for possible InternationalType\n   */\n  InternationalType = {\n  UK: 'UK', USA: 'USA', France: 'France', Germany: 'Germany', Denmark: 'Denmark', Sweden: 'Sweden', Italy: 'Italy', Spain: 'Spain',\n  Japan: 'Japan', Norway: 'Norway', Denmark2: 'Denmark2', Spain2: 'Spain2', LatinAmerica: 'LatinAmerica', Korea: 'Korea', Ireland: 'Ireland', Legal: 'Legal'\n  };\n\n  /**\n   * Constant for possible FontStyleType\n   */\n  FontStyleType = {\n    /** Font-A (12 x 24 dots) / Specify 7 x 9 font (half dots) */\n    A: 'A',\n    /** Font-B (9 x 24 dots) / Specify 5 x 9 font (2P-1) */\n    B: 'B'\n  };\n\n  /**\n   * Constant for possible CutPaperAction\n  */\n  CutPaperAction = {\n    FullCut: 'FullCut', FullCutWithFeed: 'FullCutWithFeed', PartialCut: 'PartialCut',  PartialCutWithFeed: 'PartialCutWithFeed'\n  };\n\n  /**\n   * Constant for possible BlackMarkType\n  */\n  BlackMarkType = {\n    Valid: 'Valid', Invalid: 'Invalid', ValidWithDetection: 'ValidWithDetection'\n  };\n\n  /**\n   * Constant for possible AlignmentPosition\n  */\n  AlignmentPosition = {\n    Left: 'Left', Center: 'Center', Right: 'Right'\n  };\n\n  /**\n   * Constant for possible LogoSize\n  */\n  LogoSize = {\n    Normal: 'Normal', DoubleWidth: 'DoubleWidth', DoubleHeight: 'DoubleHeight', DoubleWidthDoubleHeight: 'DoubleWidthDoubleHeight'\n   };\n\n  /**\n   * Constant for possible BarcodeSymbology\n  */\n  BarcodeSymbology = {\n    Code128: 'Code128',\n    Code39: 'Code39',\n    Code93: 'Code93',\n    ITF: 'ITF',\n    JAN8: 'JAN8',\n    JAN13: 'JAN13',\n    NW7: 'NW7',\n    UPCA: 'UPCA',\n    UPCE: 'UPCE'\n  };\n\n  /**\n    * Constant for possible BarcodeWidth\n  */\n  BarcodeWidth = {\n    Mode1: 'Mode1',\n    Mode2: 'Mode2',\n    Mode3: 'Mode3',\n    Mode4: 'Mode4',\n    Mode5: 'Mode5',\n    Mode6: 'Mode6',\n    Mode7: 'Mode7',\n    Mode8: 'Mode8',\n    Mode9: 'Mode9'\n  };\n\n  /**\n    * Constant for possible QrCodeModel\n  */\n  QrCodeModel = {\n    No1: 'No1',\n    No2: 'No2'\n  };\n\n  /**\n    * Constant for possible QrCodeLevel \n  */\n  QrCodeLevel = {\n    H: 'H',\n    L: 'L',\n    M: 'M',\n    Q: 'Q'\n  };\n\n/**\n  * Constant for possible BitmapConverterRotation\n*/\nBitmapConverterRotation = {\n  Normal: 'Normal',\n  Left90: 'Left90',\n  Right90: 'Right90',\n  Rotate180: 'Rotate180'\n};\n\n  /**\n     * Find printers available\n     * @param type {string} Iterface Type: All, LAN, Bluetooth, USB\n     * @return {Promise<Printers>} Returns a promise that resolves with an array of printers\n  */\n  @Cordova()\n  portDiscovery(type: string): Promise<Printers> { return; }\n\n /**\n   * Checks the status of the printer \n   * @param port {string} printer name i.e BT:StarMicronics\n   * @param emulation {string} StarPrinter Emulation type: \"StarPRNT\", \"StarPRNTL\", \"StarLine\", \"StarGraphic\", \"EscPos\", \"EscPosMobile\", \"StarDotImpact\"\n   * @return {Promise<PrinterStatus>} Returns a promise that resolves with the PrinterStatus object\n   */\n  @Cordova()\n  checkStatus(port: string, emulation: string): Promise<PrinterStatus> { return; }\n\n    /**\n     * Prints plain text \n     * @param port {string} printer name i.e BT:StarMicronics. Send null to use a printer connected via StarIOExtManager using the connect() function\n     * @param emulation {string} StarPrinter Emulation type: \"StarPRNT\", \"StarPRNTL\", \"StarLine\", \"StarGraphic\", \"EscPos\", \"EscPosMobile\", \"StarDotImpact\"\n     * @param printObj {PrintObj} text:string, cutReceipt?:boolean, openCashDrawer?:boolean\n     * @return {Promise<any>} Success! if printed correctly or error message string returned by the SDK.\n     */\n  @Cordova()\n  printRawText(port: string, emulation: string, printObj: PrintObj): Promise<any> { return; }\n\n    /**\n     * Converts the text into a bitmap image and sends it to the printer\n     * @param port {string} printer name i.e BT:StarMicronics.  Send null to use a printer connected via StarIOExtManager using the connect() function\n     * @param emulation {string} StarPrinter Emulation type: \"StarPRNT\", \"StarPRNTL\", \"StarLine\", \"StarGraphic\", \"EscPos\", \"EscPosMobile\", \"StarDotImpact\"\n     * @param rasterObj {RasterObj} text:string, cutReceipt?:boolean, openCashDrawer?:boolean, fontSize:number, paperWidth:number\n     * @return {Promise<any>} Success! if printed correctly or error message string returned by the SDK.\n     */\n    @Cordova()\n    printRasterReceipt(port: string, emulation: string, rasterObj: RasterObj): Promise<any> { return; }\n\n    /**\n     * Gets an image from a string URI and converts it to bitmap to send it to the printer\n     * @param port {string} printer name i.e BT:StarMicronics.  Send null to use a printer connected via StarIOExtManager using the connect() function\n     * @param emulation {string} StarPrinter Emulation type: \"StarPRNT\", \"StarPRNTL\", \"StarLine\", \"StarGraphic\", \"EscPos\", \"EscPosMobile\", \"StarDotImpact\"\n     * @param imageObj {ImageObj} uri:string, paperWidth?:number, cutReceipt?:boolean, openCashDrawer?:boolean\n     * @return {Promise<any>} Success! if printed correctly or error message string returned by the SDK.\n     */\n    @Cordova()\n    printImage(port: string, emulation: string, imageObj: ImageObj): Promise<any> { return; }\n\n\n    /**\n     * sends an appendPeripheral command to the printer for channels No1 and No2\n     * @param port {string} printer name i.e BT:StarMicronics.  Send null to use a printer connected via StarIOExtManager using the connect() function\n     * @param emulation {string} StarPrinter Emulation type: \"StarPRNT\", \"StarPRNTL\", \"StarLine\", \"StarGraphic\", \"EscPos\", \"EscPosMobile\", \"StarDotImpact\"\n     * @return {Promise<any>} Success! if opened or error message string returned by the SDK.\n     */\n    @Cordova()\n    openCashDrawer(port: string, emulation: string): Promise<any> { return; }\n\n        /**\n     * Sends an Array of commands to the command buffer using the Android ICommandBuilderInterface or iOS ISCBBuilderInterface\n     * @param port {string} printer name i.e BT:StarMicronics.  Send null to use a printer connected via StarIOExtManager using the connect() function\n     * @param emulation {string} StarPrinter Emulation type: \"StarPRNT\", \"StarPRNTL\", \"StarLine\", \"StarGraphic\", \"EscPos\", \"EscPosMobile\", \"StarDotImpact\"\n     * @param commandsArray {CommandsArray} each command in the array should be an instance of the PrintCommand object. Example [{append:\"text\"}, {\"openCashDrawer: 1\"}]\n     * @return {Promise<any>} Success! if printed correctly or error message string returned by the SDK.\n     */\n    @Cordova()\n    print(port: string, emulation: string, commandsArray: CommandsArray): Promise<any> { return; }\n\n     /**\n     * Allows you to connect to the printer, keep the connection alive and receive status updates through an observable\n     * @param port {string} printer name i.e BT:StarMicronics.\n     * @param emulation {string} StarPrinter Emulation type: \"StarPRNT\", \"StarPRNTL\", \"StarLine\", \"StarGraphic\", \"EscPos\", \"EscPosMobile\", \"StarDotImpact\"\n     * @return {Observable<any>} Success! if connected or error message string returned by the SDK.\n     */\n    @Cordova({\n      observable: true,\n      callbackStyle: 'node'\n    })\n    connect(port: string, emulation: string): Observable<any> { return; }\n\n    /**\n    * Returns an observable with the device status events. Only fires when a printer is connnected through the connect() function\n    * @return {Observable<any>} dataType: printerOnline, printerOffline, printerImpossible, printerPaperEmpty, printerPaperNearEmpty, printerPaperReady, printerCoverOpen, printerCoverClose, cashDrawerOpen, cashDrawerClose\n    */\n    @Cordova({\n      eventObservable: true,\n      event: 'starPrntData'\n    })\n    getStatus(): Observable<any> { return; }\n\n    /**\n     * Allows to disconnect (close the connection to the peripherals), this is useful to avoid keeping alive a connection when not in the app to save device battery \n     * (energy consumption). You should call this function when the app is paused or closed.\n     * @return {Promise<any>} Success! if connected or error message string returned by the SDK.\n     */\n    @Cordova()\n    disconnect(): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}